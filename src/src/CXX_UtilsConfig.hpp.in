#ifndef CONFIG_HPP
#define CONFIG_HPP


#cmakedefine USE_ARRAY_BOUNDS_CHECK

#ifndef USE_ATK
#cmakedefine USE_ATK
#endif

#ifndef USE_CHAI
#cmakedefine USE_CHAI
#endif

#ifndef USE_MPI
#cmakedefine USE_MPI
#endif

#ifndef USE_CUDA
#cmakedefine USE_CUDA
#endif

#ifndef USE_TOTALVIEW_OUTPUT
#cmakedefine USE_TOTALVIEW_OUTPUT
#endif

#if defined(USE_CUDA) && defined(__CUDACC__)
  #define LVARRAY_HOST_DEVICE __host__ __device__
  #define LVARRY_DEVICE __device__

  // This pragma disables nvcc warnings about calling a host function from a host-device
  // function. This is used on templated host-device functions where some template instantiations
  // call host only code. This is safe as long as the host only instantiations are only called on
  // the host. Furthermore it seems like trying to call a host only instantiation on the device leads
  // to other compiler errors/warnings.
  // To use place directly above a function declaration.
  #define DISABLE_HD_WARNING _Pragma("hd_warning_disable")
#else
  #define LVARRAY_HOST_DEVICE
  #define LVARRY_DEVICE
  #define DISABLE_HD_WARNING
#endif


#if defined(__clang__)  
  #define restrict __restrict__
  #define restrict_this
  #define CONSTEXPRFUNC constexpr  
#elif defined(__GNUC__)  
  #if defined(__INTEL_COMPILER)
    #define restrict __restrict__
    #define restrict_this
    #define CONSTEXPRFUNC
  #else
    #define restrict __restrict__
    #define restrict_this
    #define CONSTEXPRFUNC constexpr
  #endif
#endif



#endif  /* GEOSX_CONFIG_HPP */

